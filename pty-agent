#!/usr/bin/env python3
#
# pty-agent: password cache daemon
# SPDX License Identifier: Apache License 2.0

import getpass
import os
import signal
import stat
import sys
import setproctitle
import base64
import hashlib
from Crypto.Cipher import AES
from Crypto import Random

import time
time.clock=lambda : time.mktime(time.gmtime())

BLOCK_SIZE = 16
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-ord(s[len(s) - 1:])]

def encrypt(raw, password):
    private_key = hashlib.sha256(password).digest()
    raw = pad(raw)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(private_key, AES.MODE_CBC, iv)
    return base64.b64encode(iv + cipher.encrypt(raw))

def decrypt(enc, password):
    private_key = hashlib.sha256(password).digest()
    enc = base64.b64decode(enc)
    iv = enc[:BLOCK_SIZE]
    cipher = AES.new(private_key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(enc[BLOCK_SIZE:]))

import socketserver as SocketServer

SOCKET = '%s/.pty-agent/socket' % os.getenv('HOME')

pw={}

class SecretsHandler(SocketServer.StreamRequestHandler):
    def handle(self):
        global pw
        global password
        for line in self.rfile:
            line = line.decode("latin-1")[:-1]
            if False: pass
            elif line.startswith('GET '):
                line = line[4:]
                if line in pw:
                    self.wfile.write((bytes.decode(decrypt(pw[line], password)) + "\n").encode("utf-8"))
                else:
                    self.wfile.write("\n".encode("latin-1"))
            elif line.startswith('SET '):
                line = line[4:]
                idx = line.index(' ')
                pw[line[:idx]] = encrypt(line[idx+1:], password)
            else: pass

def main():
    if os.path.exists(SOCKET) and stat.S_ISSOCK(os.stat(SOCKET).st_mode):
        os.unlink(SOCKET)

    # Sanity check permissions
    if os.stat(os.path.dirname(SOCKET)).st_mode & 0o7077:
        raise Exception("Insane permissions on '%s'" % SOCKET)

    # daemonize
    def handler(signum, stackframe):
        pid, exit = os.wait()
        sys.exit(exit)
    server = SocketServer.UnixStreamServer(SOCKET, SecretsHandler)
    if os.fork(): # parent
        exit
    else: # child
        if os.fork():
            exit
        else:
            global password
            password = Random.new().read(AES.block_size)
            setproctitle.setproctitle("pty-agent")
            signal.signal(signal.SIGCHLD, handler)
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            signal.signal(signal.SIGHUP, signal.SIG_IGN)
            server.serve_forever()

if __name__ == '__main__':
    main()
